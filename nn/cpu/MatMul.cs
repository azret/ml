namespace nn.CPU {
    using System;
    using System.ComponentModel;
    using System.Runtime.InteropServices;
    using System.Threading;

    using static kernel32;

    /// <summary>
    /// Optimized "C" implementation of MatMul
    /// </summary>
    public unsafe class MatMulC : F.MatMul, IDisposable {
        static byte[] matmul_backward = new byte[] {
            0x48, 0x8B, 0xC4, 0x4C, 0x89, 0x48, 0x20, 0x4C, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x53,
            0x48, 0x83, 0xEC, 0x40, 0x4C, 0x8B, 0xD2, 0x49, 0x8B, 0xD8, 0x33, 0xD2, 0x89, 0x14, 0x24, 0x39,
            0x94, 0x24, 0x90, 0x00, 0x00, 0x00, 0x0F, 0x86, 0x03, 0x03, 0x00, 0x00, 0x44, 0x8B, 0x9C, 0x24,
            0x98, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x48, 0x89, 0x68, 0x08,
            0x48, 0x89, 0x70, 0xF0, 0x48, 0x89, 0x78, 0xE8, 0x4C, 0x89, 0x60, 0xE0, 0x4C, 0x89, 0x68, 0xD8,
            0x4C, 0x89, 0x70, 0xD0, 0x44, 0x8B, 0xB4, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x4C, 0x89, 0x78, 0xC8,
            0x8B, 0xC2, 0x45, 0x33, 0xE4, 0x41, 0x0F, 0xAF, 0xC3, 0x4C, 0x8D, 0x3C, 0x83, 0x4D, 0x8D, 0x0C,
            0x81, 0x45, 0x85, 0xF6, 0x0F, 0x84, 0x7B, 0x02, 0x00, 0x00, 0x8B, 0xC2, 0x4D, 0x8B, 0xE8, 0x41,
            0x0F, 0xAF, 0xC6, 0x89, 0x44, 0x24, 0x04, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x41, 0x03, 0xC4, 0x41, 0x8B, 0xCC, 0x41, 0x0F, 0xAF, 0xCB, 0x45, 0x33, 0xC0, 0x33, 0xFF, 0xF3,
            0x41, 0x0F, 0x10, 0x14, 0x82, 0x48, 0x8B, 0x44, 0x24, 0x70, 0x0F, 0x28, 0xDA, 0x0F, 0xC6, 0xDB,
            0x00, 0x4C, 0x8D, 0x14, 0x88, 0x48, 0x8B, 0x44, 0x24, 0x78, 0x48, 0x8D, 0x14, 0x88, 0x45, 0x85,
            0xDB, 0x0F, 0x84, 0xF4, 0x01, 0x00, 0x00, 0x41, 0x83, 0xFB, 0x04, 0x0F, 0x82, 0xA2, 0x00, 0x00,
            0x00, 0x41, 0x8D, 0x43, 0xFF, 0x48, 0x63, 0xC8, 0x49, 0x8D, 0x34, 0x8F, 0x48, 0x8D, 0x04, 0x8A,
            0x48, 0x3B, 0xD6, 0x77, 0x09, 0x49, 0x3B, 0xC7, 0x0F, 0x83, 0x85, 0x00, 0x00, 0x00, 0x49, 0x8D,
            0x1C, 0x89, 0x48, 0x3B, 0xD3, 0x77, 0x05, 0x49, 0x3B, 0xC1, 0x73, 0x77, 0x49, 0x8D, 0x0C, 0x8A,
            0x48, 0x3B, 0xD1, 0x77, 0x05, 0x49, 0x3B, 0xC2, 0x73, 0x69, 0x4C, 0x3B, 0xCE, 0x77, 0x05, 0x49,
            0x3B, 0xDF, 0x73, 0x5F, 0x4C, 0x3B, 0xC9, 0x77, 0x05, 0x49, 0x3B, 0xDA, 0x73, 0x55, 0x41, 0x8B,
            0xDB, 0x83, 0xE3, 0xFC, 0x49, 0x8B, 0xF2, 0x49, 0x8B, 0xEF, 0x49, 0x2B, 0xF1, 0x49, 0x2B, 0xE9,
            0x48, 0x8B, 0xCA, 0x49, 0x8B, 0xC1, 0x49, 0x2B, 0xC9, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x10, 0x00, 0x41, 0x83, 0xC0, 0x04, 0x48, 0x83, 0xC7, 0x04, 0x0F, 0x10, 0x0C, 0x06, 0x0F,
            0x59, 0xCB, 0x0F, 0x58, 0xC8, 0x0F, 0x10, 0x04, 0x01, 0x0F, 0x11, 0x08, 0x0F, 0x10, 0x0C, 0x28,
            0x0F, 0x59, 0xCB, 0x0F, 0x58, 0xC8, 0x0F, 0x11, 0x0C, 0x01, 0x48, 0x83, 0xC0, 0x10, 0x44, 0x3B,
            0xC3, 0x72, 0xCD, 0x45, 0x3B, 0xC3, 0x0F, 0x83, 0x3F, 0x01, 0x00, 0x00, 0x41, 0x8B, 0xC3, 0x41,
            0x2B, 0xC0, 0x83, 0xF8, 0x04, 0x0F, 0x82, 0xE5, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC3, 0x48, 0x8D,
            0x4F, 0x01, 0x41, 0x2B, 0xC0, 0x49, 0x8D, 0x0C, 0x89, 0x83, 0xE8, 0x04, 0x48, 0x8B, 0xDA, 0xC1,
            0xE8, 0x02, 0x49, 0x8B, 0xF2, 0x49, 0x8B, 0xEF, 0x49, 0x2B, 0xD9, 0x49, 0x2B, 0xF1, 0x49, 0x2B,
            0xE9, 0xFF, 0xC0, 0x44, 0x8B, 0xF0, 0x45, 0x8D, 0x04, 0x80, 0x48, 0x8D, 0x3C, 0x87, 0x66, 0x90,
            0x0F, 0x28, 0xC2, 0x0F, 0x28, 0xCA, 0xF3, 0x0F, 0x59, 0x44, 0x31, 0xFC, 0xF3, 0x0F, 0x58, 0x41,
            0xFC, 0xF3, 0x0F, 0x11, 0x41, 0xFC, 0x0F, 0x28, 0xC2, 0xF3, 0x0F, 0x59, 0x44, 0x29, 0xFC, 0xF3,
            0x0F, 0x58, 0x44, 0x0B, 0xFC, 0xF3, 0x0F, 0x11, 0x44, 0x0B, 0xFC, 0x0F, 0x28, 0xC2, 0xF3, 0x0F,
            0x59, 0x0C, 0x31, 0xF3, 0x0F, 0x58, 0x09, 0xF3, 0x0F, 0x11, 0x09, 0x0F, 0x28, 0xCA, 0xF3, 0x0F,
            0x59, 0x04, 0x29, 0xF3, 0x0F, 0x58, 0x04, 0x0B, 0xF3, 0x0F, 0x11, 0x04, 0x0B, 0x0F, 0x28, 0xC2,
            0xF3, 0x0F, 0x59, 0x4C, 0x31, 0x04, 0xF3, 0x0F, 0x58, 0x49, 0x04, 0xF3, 0x0F, 0x11, 0x49, 0x04,
            0x0F, 0x28, 0xCA, 0xF3, 0x0F, 0x59, 0x44, 0x29, 0x04, 0xF3, 0x0F, 0x58, 0x44, 0x0B, 0x04, 0xF3,
            0x0F, 0x11, 0x44, 0x0B, 0x04, 0x0F, 0x28, 0xC2, 0xF3, 0x0F, 0x59, 0x4C, 0x31, 0x08, 0xF3, 0x0F,
            0x58, 0x49, 0x08, 0xF3, 0x0F, 0x11, 0x49, 0x08, 0xF3, 0x0F, 0x59, 0x44, 0x29, 0x08, 0xF3, 0x0F,
            0x58, 0x44, 0x0B, 0x08, 0xF3, 0x0F, 0x11, 0x44, 0x0B, 0x08, 0x48, 0x83, 0xC1, 0x10, 0x49, 0x83,
            0xEE, 0x01, 0x0F, 0x85, 0x58, 0xFF, 0xFF, 0xFF, 0x44, 0x8B, 0xB4, 0x24, 0xA0, 0x00, 0x00, 0x00,
            0x45, 0x3B, 0xC3, 0x73, 0x46, 0x49, 0x8B, 0xDF, 0x49, 0x8D, 0x0C, 0xB9, 0x49, 0x2B, 0xD9, 0x4D,
            0x2B, 0xD1, 0x49, 0x2B, 0xD1, 0x41, 0x8B, 0xC3, 0x41, 0x2B, 0xC0, 0x44, 0x8B, 0xC0, 0x0F, 0x28,
            0xC2, 0x0F, 0x28, 0xCA, 0xF3, 0x42, 0x0F, 0x59, 0x04, 0x11, 0xF3, 0x0F, 0x58, 0x01, 0xF3, 0x0F,
            0x11, 0x01, 0xF3, 0x0F, 0x59, 0x0C, 0x0B, 0xF3, 0x0F, 0x58, 0x0C, 0x0A, 0xF3, 0x0F, 0x11, 0x0C,
            0x0A, 0x48, 0x83, 0xC1, 0x04, 0x49, 0x83, 0xE8, 0x01, 0x75, 0xD3, 0x4C, 0x8B, 0x84, 0x24, 0x88,
            0x00, 0x00, 0x00, 0x4D, 0x85, 0xC0, 0x74, 0x0C, 0xF3, 0x41, 0x0F, 0x58, 0x55, 0x00, 0xF3, 0x41,
            0x0F, 0x11, 0x55, 0x00, 0x8B, 0x44, 0x24, 0x04, 0x41, 0xFF, 0xC4, 0x4C, 0x8B, 0x54, 0x24, 0x58,
            0x49, 0x83, 0xC5, 0x04, 0x45, 0x3B, 0xE6, 0x0F, 0x82, 0xA3, 0xFD, 0xFF, 0xFF, 0x8B, 0x14, 0x24,
            0x48, 0x8B, 0x5C, 0x24, 0x60, 0x4C, 0x8B, 0x4C, 0x24, 0x68, 0xFF, 0xC2, 0x89, 0x14, 0x24, 0x3B,
            0x94, 0x24, 0x90, 0x00, 0x00, 0x00, 0x0F, 0x82, 0x54, 0xFD, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24,
            0x10, 0x4C, 0x8B, 0x74, 0x24, 0x18, 0x4C, 0x8B, 0x6C, 0x24, 0x20, 0x4C, 0x8B, 0x64, 0x24, 0x28,
            0x48, 0x8B, 0x7C, 0x24, 0x30, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x48, 0x8B, 0x6C, 0x24, 0x50, 0x48,
            0x83, 0xC4, 0x40, 0x5B, 0xC3
        };

        static byte[] matmul_forward = new byte[] {
            0x48, 0x8B, 0xC4, 0x4C, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x48, 0x89, 0x48, 0x08, 0x41,
            0x54, 0x41, 0x55, 0x48, 0x83, 0xEC, 0x38, 0x45, 0x33, 0xE4, 0x4D, 0x8B, 0xE9, 0x44, 0x89, 0x24,
            0x24, 0x44, 0x39, 0x64, 0x24, 0x70, 0x0F, 0x86, 0xF6, 0x01, 0x00, 0x00, 0x44, 0x8B, 0x54, 0x24,
            0x78, 0x48, 0x89, 0x58, 0x20, 0x48, 0x89, 0x68, 0xE8, 0x48, 0x89, 0x70, 0xE0, 0x48, 0x89, 0x78,
            0xD8, 0x4C, 0x89, 0x70, 0xD0, 0x4C, 0x89, 0x78, 0xC8, 0x44, 0x8B, 0xBC, 0x24, 0x80, 0x00, 0x00,
            0x00, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x41, 0x8B, 0xC4, 0x33, 0xED, 0x41, 0x0F, 0xAF, 0xC2, 0x48, 0x8D, 0x34, 0x82, 0x41, 0x8B, 0xC4,
            0x41, 0x0F, 0xAF, 0xC7, 0x48, 0x8D, 0x3C, 0x81, 0x45, 0x85, 0xFF, 0x0F, 0x84, 0x71, 0x01, 0x00,
            0x00, 0x4C, 0x8B, 0x64, 0x24, 0x60, 0x4D, 0x8B, 0xF5, 0x4C, 0x2B, 0xF7, 0x0F, 0x1F, 0x40, 0x00,
            0x4D, 0x85, 0xED, 0x74, 0x08, 0xF3, 0x42, 0x0F, 0x10, 0x14, 0x37, 0xEB, 0x03, 0x0F, 0x57, 0xD2,
            0x8B, 0xC5, 0x45, 0x33, 0xC0, 0x41, 0x0F, 0xAF, 0xC2, 0x33, 0xDB, 0x4D, 0x8D, 0x0C, 0x84, 0x45,
            0x85, 0xD2, 0x0F, 0x84, 0x19, 0x01, 0x00, 0x00, 0x41, 0x83, 0xFA, 0x08, 0x72, 0x5E, 0x41, 0x8B,
            0xD2, 0x48, 0x8D, 0x46, 0x10, 0x83, 0xE2, 0xF8, 0x49, 0x8B, 0xC9, 0x48, 0x2B, 0xCE, 0x0F, 0x57,
            0xDB, 0x0F, 0x57, 0xE4, 0x0F, 0x10, 0x40, 0xF0, 0x41, 0x83, 0xC0, 0x08, 0x48, 0x83, 0xC3, 0x08,
            0x0F, 0x10, 0x4C, 0x01, 0xF0, 0x0F, 0x59, 0xC8, 0x0F, 0x10, 0x04, 0x01, 0x0F, 0x58, 0xD9, 0x0F,
            0x10, 0x08, 0x48, 0x83, 0xC0, 0x20, 0x0F, 0x59, 0xC8, 0x0F, 0x58, 0xE1, 0x44, 0x3B, 0xC2, 0x72,
            0xD3, 0x0F, 0x58, 0xDC, 0x0F, 0x28, 0xCB, 0x0F, 0x12, 0xCB, 0x0F, 0x58, 0xCB, 0x0F, 0x28, 0xC1,
            0x0F, 0xC6, 0xC1, 0xF5, 0xF3, 0x0F, 0x58, 0xC8, 0xF3, 0x0F, 0x58, 0xD1, 0x45, 0x3B, 0xC2, 0x0F,
            0x83, 0xAC, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC2, 0x41, 0x2B, 0xC0, 0x83, 0xF8, 0x04, 0x72, 0x7C,
            0x41, 0x8B, 0xC2, 0x48, 0x8D, 0x4B, 0x01, 0x41, 0x2B, 0xC0, 0x48, 0x8D, 0x0C, 0x8E, 0x83, 0xE8,
            0x04, 0x49, 0x8B, 0xD1, 0xC1, 0xE8, 0x02, 0x48, 0x2B, 0xD6, 0xFF, 0xC0, 0x44, 0x8B, 0xD8, 0x45,
            0x8D, 0x04, 0x80, 0x48, 0x8D, 0x1C, 0x83, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xF3, 0x0F, 0x10, 0x4C, 0x11, 0xFC, 0xF3, 0x0F, 0x59, 0x49, 0xFC, 0xF3, 0x0F, 0x10, 0x01, 0xF3,
            0x0F, 0x59, 0x04, 0x11, 0xF3, 0x0F, 0x58, 0xCA, 0x0F, 0x28, 0xD1, 0xF3, 0x0F, 0x10, 0x4C, 0x11,
            0x04, 0xF3, 0x0F, 0x59, 0x49, 0x04, 0xF3, 0x0F, 0x58, 0xD0, 0xF3, 0x0F, 0x10, 0x44, 0x11, 0x08,
            0xF3, 0x0F, 0x59, 0x41, 0x08, 0x48, 0x83, 0xC1, 0x10, 0xF3, 0x0F, 0x58, 0xD1, 0xF3, 0x0F, 0x58,
            0xD0, 0x49, 0x83, 0xEB, 0x01, 0x75, 0xB9, 0x45, 0x3B, 0xC2, 0x73, 0x25, 0x4C, 0x2B, 0xCE, 0x48,
            0x8D, 0x0C, 0x9E, 0x41, 0x8B, 0xD2, 0x41, 0x2B, 0xD0, 0xF3, 0x41, 0x0F, 0x10, 0x04, 0x09, 0xF3,
            0x0F, 0x59, 0x01, 0x48, 0x83, 0xC1, 0x04, 0xF3, 0x0F, 0x58, 0xD0, 0x48, 0x83, 0xEA, 0x01, 0x75,
            0xE8, 0xF3, 0x0F, 0x11, 0x17, 0xFF, 0xC5, 0x48, 0x83, 0xC7, 0x04, 0x41, 0x3B, 0xEF, 0x0F, 0x82,
            0xAC, 0xFE, 0xFF, 0xFF, 0x44, 0x8B, 0x24, 0x24, 0x48, 0x8B, 0x54, 0x24, 0x58, 0x48, 0x8B, 0x4C,
            0x24, 0x50, 0x41, 0xFF, 0xC4, 0x44, 0x89, 0x24, 0x24, 0x44, 0x3B, 0x64, 0x24, 0x70, 0x0F, 0x82,
            0x5C, 0xFE, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24, 0x10, 0x4C, 0x8B, 0x74, 0x24, 0x18, 0x48, 0x8B,
            0x7C, 0x24, 0x20, 0x48, 0x8B, 0x74, 0x24, 0x28, 0x48, 0x8B, 0x6C, 0x24, 0x30, 0x48, 0x8B, 0x5C,
            0x24, 0x68, 0x48, 0x83, 0xC4, 0x38, 0x41, 0x5D, 0x41, 0x5C, 0xC3
        };


        IntPtr _p_matmul_forward_cpu_ptr;
        IntPtr _p_matmul_backward_cpu_ptr;

        T_forward _matmul_forward_cpu_func;
        T_backward _matmul_backward_cpu_func;

        public MatMulC(byte[] matmul_forward_cpu_asm, byte[] matmul_backward_cpu_asm) : base() {
            if (!(matmul_forward_cpu_asm is null)) {
                _matmul_forward_cpu_func = alloc<T_forward>(
                    matmul_forward_cpu_asm, out _p_matmul_forward_cpu_ptr);
            }
            if (!(matmul_backward_cpu_asm is null)) {
                _matmul_backward_cpu_func = alloc<T_backward>(
                    matmul_backward_cpu_asm, out _p_matmul_backward_cpu_ptr);
            }
        }

        public MatMulC() 
            : this(matmul_forward, matmul_backward) {
        }

        protected override void Dispose(bool disposing) {
            free(disposing,
                ref _p_matmul_backward_cpu_ptr,
                ref _matmul_forward_cpu_func);
            free(disposing,
                ref _p_matmul_forward_cpu_ptr,
                ref _matmul_backward_cpu_func);
        }

        static private T_func alloc<T_func>(byte[] asm, out IntPtr _func_ptr) {
            _func_ptr = VirtualAlloc(IntPtr.Zero, new IntPtr(asm.Length),
                AllocationTypes.Commit | AllocationTypes.Reserve, MemoryProtections.ExecuteReadWrite);
            if (_func_ptr == IntPtr.Zero) {
                throw new OutOfMemoryException();
            }
            Marshal.Copy(asm,
                0,
                _func_ptr,
                asm.Length);
            return Marshal.GetDelegateForFunctionPointer<T_func>(
                _func_ptr);
        }

        static void free<T_func>(bool disposing, ref IntPtr _func_ptr, ref T_func func) 
            where T_func : class {
            Interlocked.Exchange(ref func, null);
            IntPtr p = Interlocked.Exchange(ref _func_ptr, IntPtr.Zero);
            if (p != IntPtr.Zero) {
                bool success = VirtualFree(p, IntPtr.Zero, FreeTypes.Release);
                if (!success && disposing) {
                    throw new Win32Exception(Marshal.GetLastWin32Error());
                }
            }
        }

        public override void forward(
            float* _Out,       /* [B, O] */
            float* _In,        /* [B, I] */
            float* _Weight,    /* [I, O] */
            float* _Bias,      /* [O] */
            uint B,
            uint I,
            uint O) {

            if (_matmul_forward_cpu_func != null) {
                _matmul_forward_cpu_func(
                    _Out,
                    _In,
                    _Weight,
                    _Bias,
                    B,
                    I,
                    O);
            } else {
                F.matmul_forward_cpu(
                    _Out,
                    _In,
                    _Weight,
                    _Bias,
                    B,
                    I,
                    O);
            }
        }

        public override void backward(
            float* _Out,       /* [B, O] */
            float* d_Out,       /* [B, O] */
            float* _In,        /* [B, I] */
            float* d_In,        /* [B, I] */
            float* _Weight,    /* [I, O] */
            float* d_Weight,    /* [I, O] */
            float* _Bias,      /* [O] */
            float* d_Bias,      /* [O] */
            uint B,
            uint I,
            uint O) {

            if (_matmul_backward_cpu_func != null) {
                _matmul_backward_cpu_func(
                    _Out,
                    d_Out,
                    _In,
                    d_In,
                    _Weight,
                    d_Weight,
                    _Bias,
                    d_Bias,
                    B,
                    I,
                    O);
            } else {
                F.matmul_backward_cpu(
                    _Out,
                    d_Out,
                    _In,
                    d_In,
                    _Weight,
                    d_Weight,
                    _Bias,
                    d_Bias,
                    B,
                    I,
                    O);
            }
        }
    }

    /// <summary>
    /// Vectorized "C" implementation of MatMul (AVX)
    /// </summary>
    public class MatMulAVX : MatMulC {
        static byte[] matmul_backward = new byte[] {
            0x48, 0x8B, 0xC4, 0x4C, 0x89, 0x48, 0x20, 0x4C, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x48,
            0x83, 0xEC, 0x48, 0x4C, 0x8B, 0xD2, 0x4D, 0x8B, 0xD8, 0x33, 0xD2, 0x89, 0x14, 0x24, 0x39, 0x94,
            0x24, 0x90, 0x00, 0x00, 0x00, 0x0F, 0x86, 0xEA, 0x02, 0x00, 0x00, 0x4C, 0x8B, 0x84, 0x24, 0x88,
            0x00, 0x00, 0x00, 0x48, 0x89, 0x58, 0x08, 0x8B, 0x9C, 0x24, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89,
            0x68, 0xF8, 0x48, 0x89, 0x70, 0xF0, 0x48, 0x89, 0x78, 0xE8, 0x4C, 0x89, 0x60, 0xE0, 0x44, 0x8B,
            0xA4, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x4C, 0x89, 0x68, 0xD8, 0x4C, 0x89, 0x70, 0xD0, 0x4C, 0x89,
            0x78, 0xC8, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x8B, 0xC2, 0x45, 0x33, 0xFF, 0x0F, 0xAF, 0xC3, 0x4D, 0x8D, 0x34, 0x83, 0x4D, 0x8D, 0x0C, 0x81,
            0x45, 0x85, 0xE4, 0x0F, 0x84, 0x4D, 0x02, 0x00, 0x00, 0x8B, 0xC2, 0x4D, 0x8B, 0xE8, 0x41, 0x0F,
            0xAF, 0xC4, 0x89, 0x44, 0x24, 0x04, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x41, 0x03, 0xC7, 0x41, 0x8B, 0xCF, 0x0F, 0xAF, 0xCB, 0x33, 0xD2, 0x45, 0x33, 0xDB, 0xC4, 0xC1,
            0x7A, 0x10, 0x14, 0x82, 0x48, 0x8B, 0x44, 0x24, 0x70, 0xC5, 0xF8, 0x28, 0xDA, 0xC5, 0xE8, 0xC6,
            0xDA, 0x00, 0x4C, 0x8D, 0x14, 0x88, 0x48, 0x8B, 0x44, 0x24, 0x78, 0x4C, 0x8D, 0x04, 0x88, 0x85,
            0xDB, 0x0F, 0x84, 0xC5, 0x01, 0x00, 0x00, 0x83, 0xFB, 0x04, 0x0F, 0x82, 0x8D, 0x00, 0x00, 0x00,
            0x8D, 0x43, 0xFF, 0x48, 0x63, 0xC8, 0x49, 0x8D, 0x34, 0x8E, 0x49, 0x8D, 0x04, 0x88, 0x4C, 0x3B,
            0xC6, 0x77, 0x05, 0x49, 0x3B, 0xC6, 0x73, 0x75, 0x49, 0x8D, 0x3C, 0x89, 0x4C, 0x3B, 0xC7, 0x77,
            0x05, 0x49, 0x3B, 0xC1, 0x73, 0x67, 0x49, 0x8D, 0x0C, 0x8A, 0x4C, 0x3B, 0xC1, 0x77, 0x05, 0x49,
            0x3B, 0xC2, 0x73, 0x59, 0x4C, 0x3B, 0xCE, 0x77, 0x05, 0x49, 0x3B, 0xFE, 0x73, 0x4F, 0x4C, 0x3B,
            0xC9, 0x77, 0x05, 0x49, 0x3B, 0xFA, 0x73, 0x45, 0x8B, 0xFB, 0x83, 0xE7, 0xFC, 0x49, 0x8B, 0xF2,
            0x49, 0x8B, 0xEE, 0x49, 0x2B, 0xF1, 0x49, 0x2B, 0xE9, 0x49, 0x8B, 0xC8, 0x49, 0x8B, 0xC1, 0x49,
            0x2B, 0xC9, 0xC5, 0xE0, 0x59, 0x0C, 0x06, 0xC5, 0xF0, 0x58, 0x08, 0xC5, 0xF8, 0x11, 0x08, 0xC5,
            0xE0, 0x59, 0x0C, 0x28, 0xC5, 0xF0, 0x58, 0x0C, 0x01, 0x83, 0xC2, 0x04, 0x49, 0x83, 0xC3, 0x04,
            0xC5, 0xF8, 0x11, 0x0C, 0x01, 0x48, 0x8D, 0x40, 0x10, 0x3B, 0xD7, 0x72, 0xD5, 0x3B, 0xD3, 0x0F,
            0x83, 0x27, 0x01, 0x00, 0x00, 0x8B, 0xC3, 0x2B, 0xC2, 0x83, 0xF8, 0x04, 0x0F, 0x82, 0xD6, 0x00,
            0x00, 0x00, 0x8B, 0xC3, 0x49, 0x8D, 0x4B, 0x01, 0x2B, 0xC2, 0x49, 0x8D, 0x0C, 0x89, 0x83, 0xE8,
            0x04, 0x49, 0x8B, 0xF8, 0xC1, 0xE8, 0x02, 0x49, 0x8B, 0xF2, 0x49, 0x8B, 0xEE, 0x49, 0x2B, 0xF9,
            0x49, 0x2B, 0xF1, 0x49, 0x2B, 0xE9, 0xFF, 0xC0, 0x44, 0x8B, 0xE0, 0x8D, 0x14, 0x82, 0x4D, 0x8D,
            0x1C, 0x83, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xC5, 0xEA, 0x59, 0x44, 0x31, 0xFC, 0xC5, 0xFA, 0x58, 0x49, 0xFC, 0xC5, 0xFA, 0x11, 0x49, 0xFC,
            0xC5, 0xEA, 0x59, 0x44, 0x29, 0xFC, 0xC5, 0xFA, 0x58, 0x4C, 0x0F, 0xFC, 0xC5, 0xFA, 0x11, 0x4C,
            0x0F, 0xFC, 0xC5, 0xEA, 0x59, 0x04, 0x31, 0xC5, 0xFA, 0x58, 0x09, 0xC5, 0xFA, 0x11, 0x09, 0xC5,
            0xEA, 0x59, 0x04, 0x29, 0xC5, 0xFA, 0x58, 0x0C, 0x0F, 0xC5, 0xFA, 0x11, 0x0C, 0x0F, 0xC5, 0xEA,
            0x59, 0x44, 0x31, 0x04, 0xC5, 0xFA, 0x58, 0x49, 0x04, 0xC5, 0xFA, 0x11, 0x49, 0x04, 0xC5, 0xEA,
            0x59, 0x44, 0x29, 0x04, 0xC5, 0xFA, 0x58, 0x4C, 0x0F, 0x04, 0xC5, 0xFA, 0x11, 0x4C, 0x0F, 0x04,
            0xC5, 0xEA, 0x59, 0x44, 0x31, 0x08, 0xC5, 0xFA, 0x58, 0x49, 0x08, 0xC5, 0xFA, 0x11, 0x49, 0x08,
            0xC5, 0xEA, 0x59, 0x44, 0x29, 0x08, 0xC5, 0xFA, 0x58, 0x4C, 0x0F, 0x08, 0xC5, 0xFA, 0x11, 0x4C,
            0x0F, 0x08, 0x48, 0x8D, 0x49, 0x10, 0x49, 0x83, 0xEC, 0x01, 0x0F, 0x85, 0x70, 0xFF, 0xFF, 0xFF,
            0x44, 0x8B, 0xA4, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x3B, 0xD3, 0x73, 0x40, 0x4B, 0x8D, 0x0C, 0x99,
            0x4D, 0x2B, 0xD1, 0x4D, 0x8B, 0xDE, 0x4D, 0x2B, 0xC1, 0x4D, 0x2B, 0xD9, 0x8B, 0xC3, 0x2B, 0xC2,
            0x8B, 0xD0, 0xC4, 0xA1, 0x6A, 0x59, 0x04, 0x11, 0xC5, 0xFA, 0x58, 0x09, 0xC5, 0xFA, 0x11, 0x09,
            0xC4, 0xC1, 0x6A, 0x59, 0x04, 0x0B, 0xC4, 0xC1, 0x7A, 0x58, 0x0C, 0x08, 0xC4, 0xC1, 0x7A, 0x11,
            0x0C, 0x08, 0x48, 0x8D, 0x49, 0x04, 0x48, 0x83, 0xEA, 0x01, 0x75, 0xD6, 0x4C, 0x8B, 0x84, 0x24,
            0x88, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xC0, 0x74, 0x0C, 0xC4, 0xC1, 0x6A, 0x58, 0x45, 0x00, 0xC4,
            0xC1, 0x7A, 0x11, 0x45, 0x00, 0x8B, 0x44, 0x24, 0x04, 0x41, 0xFF, 0xC7, 0x4C, 0x8B, 0x54, 0x24,
            0x58, 0x49, 0x83, 0xC5, 0x04, 0x45, 0x3B, 0xFC, 0x0F, 0x82, 0xD2, 0xFD, 0xFF, 0xFF, 0x8B, 0x14,
            0x24, 0x4C, 0x8B, 0x5C, 0x24, 0x60, 0x4C, 0x8B, 0x4C, 0x24, 0x68, 0xFF, 0xC2, 0x89, 0x14, 0x24,
            0x3B, 0x94, 0x24, 0x90, 0x00, 0x00, 0x00, 0x0F, 0x82, 0x83, 0xFD, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C,
            0x24, 0x10, 0x4C, 0x8B, 0x74, 0x24, 0x18, 0x4C, 0x8B, 0x6C, 0x24, 0x20, 0x4C, 0x8B, 0x64, 0x24,
            0x28, 0x48, 0x8B, 0x7C, 0x24, 0x30, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x48, 0x8B, 0x6C, 0x24, 0x40,
            0x48, 0x8B, 0x5C, 0x24, 0x50, 0x48, 0x83, 0xC4, 0x48, 0xC3
        };

        static byte[] matmul_forward = new byte[] {

            0x48, 0x8B, 0xC4, 0x4C, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x48, 0x89, 0x48, 0x08, 0x41,
            0x54, 0x41, 0x55, 0x48, 0x83, 0xEC, 0x38, 0x45, 0x33, 0xE4, 0x4D, 0x8B, 0xE9, 0x44, 0x89, 0x24,
            0x24, 0x44, 0x39, 0x64, 0x24, 0x70, 0x0F, 0x86, 0xF8, 0x01, 0x00, 0x00, 0x44, 0x8B, 0x54, 0x24,
            0x78, 0x48, 0x89, 0x58, 0x20, 0x48, 0x89, 0x68, 0xE8, 0x48, 0x89, 0x70, 0xE0, 0x48, 0x89, 0x78,
            0xD8, 0x4C, 0x89, 0x70, 0xD0, 0x4C, 0x89, 0x78, 0xC8, 0x44, 0x8B, 0xBC, 0x24, 0x80, 0x00, 0x00,
            0x00, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x41, 0x8B, 0xC4, 0x33, 0xF6, 0x41, 0x0F, 0xAF, 0xC2, 0x4C, 0x8D, 0x34, 0x82, 0x41, 0x8B, 0xC4,
            0x41, 0x0F, 0xAF, 0xC7, 0x48, 0x8D, 0x3C, 0x81, 0x45, 0x85, 0xFF, 0x0F, 0x84, 0x73, 0x01, 0x00,
            0x00, 0x4C, 0x8B, 0x64, 0x24, 0x60, 0x49, 0x8B, 0xED, 0x48, 0x2B, 0xEF, 0x0F, 0x1F, 0x40, 0x00,
            0x4D, 0x85, 0xED, 0x74, 0x07, 0xC5, 0xFA, 0x10, 0x1C, 0x2F, 0xEB, 0x04, 0xC5, 0xE0, 0x57, 0xDB,
            0x8B, 0xC6, 0x33, 0xD2, 0x41, 0x0F, 0xAF, 0xC2, 0x45, 0x33, 0xDB, 0x4D, 0x8D, 0x0C, 0x84, 0x45,
            0x85, 0xD2, 0x0F, 0x84, 0x1B, 0x01, 0x00, 0x00, 0x41, 0x83, 0xFA, 0x08, 0x72, 0x67, 0x45, 0x8B,
            0xC2, 0x49, 0x8D, 0x46, 0x10, 0x41, 0x83, 0xE0, 0xF8, 0x49, 0x8B, 0xC9, 0x49, 0x2B, 0xCE, 0xC5,
            0xE8, 0x57, 0xD2, 0xC5, 0xD8, 0x57, 0xE4, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xC5, 0xF8, 0x10, 0x4C, 0x01, 0xF0, 0xC5, 0xF0, 0x59, 0x48, 0xF0, 0xC5, 0xF0, 0x58, 0xD2, 0xC5,
            0xF8, 0x10, 0x08, 0xC5, 0xF0, 0x59, 0x0C, 0x01, 0x83, 0xC2, 0x08, 0x48, 0x8D, 0x40, 0x20, 0x49,
            0x83, 0xC3, 0x08, 0xC5, 0xF0, 0x58, 0xE4, 0x41, 0x3B, 0xD0, 0x72, 0xD4, 0xC5, 0xD8, 0x58, 0xCA,
            0xC5, 0xF0, 0x12, 0xC1, 0xC5, 0xF8, 0x58, 0xD1, 0xC5, 0xE8, 0xC6, 0xC2, 0xF5, 0xC5, 0xEA, 0x58,
            0xD0, 0xC5, 0xE2, 0x58, 0xDA, 0x41, 0x3B, 0xD2, 0x0F, 0x83, 0xA5, 0x00, 0x00, 0x00, 0x41, 0x8B,
            0xC2, 0x2B, 0xC2, 0x83, 0xF8, 0x04, 0x72, 0x75, 0x41, 0x8B, 0xC2, 0x49, 0x8D, 0x4B, 0x01, 0x2B,
            0xC2, 0x49, 0x8D, 0x0C, 0x8E, 0x83, 0xE8, 0x04, 0x4D, 0x8B, 0xC1, 0xC1, 0xE8, 0x02, 0x4D, 0x2B,
            0xC6, 0xFF, 0xC0, 0x8B, 0xD8, 0x8D, 0x14, 0x82, 0x4D, 0x8D, 0x1C, 0x83, 0x0F, 0x1F, 0x40, 0x00,
            0xC4, 0xA1, 0x7A, 0x10, 0x44, 0x01, 0xFC, 0xC5, 0xFA, 0x59, 0x49, 0xFC, 0xC5, 0xFA, 0x10, 0x11,
            0xC4, 0xA1, 0x6A, 0x59, 0x04, 0x01, 0x48, 0x8D, 0x49, 0x10, 0xC5, 0xF2, 0x58, 0xDB, 0xC4, 0xA1,
            0x7A, 0x10, 0x4C, 0x01, 0xF4, 0xC5, 0xF2, 0x59, 0x51, 0xF4, 0xC5, 0xE2, 0x58, 0xE0, 0xC4, 0xA1,
            0x7A, 0x10, 0x44, 0x01, 0xF8, 0xC5, 0xFA, 0x59, 0x49, 0xF8, 0xC5, 0xDA, 0x58, 0xDA, 0xC5, 0xE2,
            0x58, 0xD9, 0x48, 0x83, 0xEB, 0x01, 0x75, 0xB8, 0x41, 0x3B, 0xD2, 0x73, 0x26, 0x4D, 0x2B, 0xCE,
            0x4B, 0x8D, 0x0C, 0x9E, 0x41, 0x8B, 0xC2, 0x2B, 0xC2, 0x8B, 0xD0, 0xC4, 0xC1, 0x7A, 0x10, 0x04,
            0x09, 0xC5, 0xFA, 0x59, 0x09, 0x48, 0x8D, 0x49, 0x04, 0xC5, 0xE2, 0x58, 0xD9, 0x48, 0x83, 0xEA,
            0x01, 0x75, 0xE8, 0xC5, 0xFA, 0x11, 0x1F, 0x48, 0x83, 0xC7, 0x04, 0xFF, 0xC6, 0x41, 0x3B, 0xF7,
            0x0F, 0x82, 0xAA, 0xFE, 0xFF, 0xFF, 0x44, 0x8B, 0x24, 0x24, 0x48, 0x8B, 0x54, 0x24, 0x58, 0x48,
            0x8B, 0x4C, 0x24, 0x50, 0x41, 0xFF, 0xC4, 0x44, 0x89, 0x24, 0x24, 0x44, 0x3B, 0x64, 0x24, 0x70,
            0x0F, 0x82, 0x5A, 0xFE, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24, 0x10, 0x4C, 0x8B, 0x74, 0x24, 0x18,
            0x48, 0x8B, 0x7C, 0x24, 0x20, 0x48, 0x8B, 0x74, 0x24, 0x28, 0x48, 0x8B, 0x6C, 0x24, 0x30, 0x48,
            0x8B, 0x5C, 0x24, 0x68, 0x48, 0x83, 0xC4, 0x38, 0x41, 0x5D, 0x41, 0x5C, 0xC3
        };

        public MatMulAVX()
            : base(matmul_forward, matmul_backward) {
        }
    }

    /// <summary>
    /// Vectorized "C" implementation of MatMul (AVX2)
    /// </summary>
    public class MatMulAVX2 : MatMulC {
        static byte[] matmul_backward = new byte[] {
                0x48, 0x8B, 0xC4, 0x4C, 0x89, 0x48, 0x20, 0x4C, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x53,
                0x57, 0x48, 0x83, 0xEC, 0x38, 0x49, 0x8B, 0xF8, 0x48, 0x8B, 0xDA, 0x45, 0x33, 0xC0, 0x44, 0x89,
                0x04, 0x24, 0x44, 0x39, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, 0x0F, 0x86, 0xF0, 0x02, 0x00, 0x00,
                0x8B, 0x94, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x44, 0x8B, 0x9C, 0x24, 0x98, 0x00, 0x00, 0x00, 0x4C,
                0x8B, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00, 0x48, 0x89, 0x70, 0xE8, 0x4C, 0x89, 0x60, 0xE0, 0x4C,
                0x89, 0x68, 0xD8, 0x4C, 0x89, 0x70, 0xD0, 0x4C, 0x89, 0x78, 0xC8, 0x0F, 0x1F, 0x44, 0x00, 0x00,
                0x41, 0x8B, 0xC0, 0x45, 0x33, 0xED, 0x41, 0x0F, 0xAF, 0xC3, 0x4C, 0x8D, 0x24, 0x87, 0x4D, 0x8D,
                0x0C, 0x81, 0x85, 0xD2, 0x0F, 0x84, 0x73, 0x02, 0x00, 0x00, 0x41, 0x8B, 0xC0, 0x4C, 0x89, 0x54,
                0x24, 0x08, 0x0F, 0xAF, 0xC2, 0x4D, 0x8B, 0xFA, 0x89, 0x44, 0x24, 0x04, 0x0F, 0x1F, 0x40, 0x00,
                0x41, 0x03, 0xC5, 0x41, 0x8B, 0xCD, 0x41, 0x0F, 0xAF, 0xCB, 0x45, 0x33, 0xC0, 0xC5, 0xFA, 0x10,
                0x14, 0x83, 0x48, 0x8B, 0x44, 0x24, 0x70, 0x33, 0xDB, 0xC5, 0xF8, 0x28, 0xDA, 0xC4, 0xE2, 0x7D,
                0x18, 0xDA, 0x4C, 0x8D, 0x14, 0x88, 0x48, 0x8B, 0x44, 0x24, 0x78, 0x48, 0x8D, 0x14, 0x88, 0x45,
                0x85, 0xDB, 0x0F, 0x84, 0xE0, 0x01, 0x00, 0x00, 0x41, 0x83, 0xFB, 0x08, 0x0F, 0x82, 0x9D, 0x00,
                0x00, 0x00, 0x41, 0x8D, 0x43, 0xFF, 0x48, 0x63, 0xC8, 0x49, 0x8D, 0x34, 0x8C, 0x48, 0x8D, 0x04,
                0x8A, 0x48, 0x3B, 0xD6, 0x77, 0x09, 0x49, 0x3B, 0xC4, 0x0F, 0x83, 0x80, 0x00, 0x00, 0x00, 0x49,
                0x8D, 0x3C, 0x89, 0x48, 0x3B, 0xD7, 0x77, 0x05, 0x49, 0x3B, 0xC1, 0x73, 0x72, 0x49, 0x8D, 0x0C,
                0x8A, 0x48, 0x3B, 0xD1, 0x77, 0x05, 0x49, 0x3B, 0xC2, 0x73, 0x64, 0x4C, 0x3B, 0xCE, 0x77, 0x05,
                0x49, 0x3B, 0xFC, 0x73, 0x5A, 0x4C, 0x3B, 0xC9, 0x77, 0x05, 0x49, 0x3B, 0xFA, 0x73, 0x50, 0x41,
                0x8B, 0xFB, 0x83, 0xE7, 0xF8, 0x49, 0x8B, 0xF2, 0x4D, 0x8B, 0xF4, 0x49, 0x2B, 0xF1, 0x4D, 0x2B,
                0xF1, 0x48, 0x8B, 0xCA, 0x49, 0x8B, 0xC1, 0x49, 0x2B, 0xC9, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
                0xC5, 0xFC, 0x10, 0x08, 0xC4, 0xE2, 0x65, 0xB8, 0x0C, 0x06, 0xC5, 0xFC, 0x11, 0x08, 0xC5, 0xFC,
                0x10, 0x0C, 0x01, 0xC4, 0xC2, 0x65, 0xB8, 0x0C, 0x06, 0x41, 0x83, 0xC0, 0x08, 0x48, 0x83, 0xC3,
                0x08, 0xC5, 0xFC, 0x11, 0x0C, 0x01, 0x48, 0x8D, 0x40, 0x20, 0x44, 0x3B, 0xC7, 0x72, 0xD1, 0x45,
                0x3B, 0xC3, 0x0F, 0x83, 0x30, 0x01, 0x00, 0x00, 0x41, 0x8B, 0xC3, 0x41, 0x2B, 0xC0, 0x83, 0xF8,
                0x04, 0x0F, 0x82, 0xDA, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC3, 0x48, 0x8D, 0x4B, 0x01, 0x41, 0x2B,
                0xC0, 0x49, 0x8D, 0x0C, 0x89, 0x83, 0xE8, 0x04, 0x48, 0x8B, 0xFA, 0xC1, 0xE8, 0x02, 0x49, 0x8B,
                0xF2, 0x4D, 0x8B, 0xF4, 0x49, 0x2B, 0xF9, 0x49, 0x2B, 0xF1, 0x4D, 0x2B, 0xF1, 0xFF, 0xC0, 0x44,
                0x8B, 0xF8, 0x45, 0x8D, 0x04, 0x80, 0x48, 0x8D, 0x1C, 0x83, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
                0xC5, 0xFA, 0x10, 0x44, 0x31, 0xFC, 0xC4, 0xE2, 0x69, 0xA9, 0x41, 0xFC, 0xC5, 0xFA, 0x11, 0x41,
                0xFC, 0xC4, 0xC1, 0x7A, 0x10, 0x44, 0x0E, 0xFC, 0xC4, 0xE2, 0x69, 0xA9, 0x44, 0x0F, 0xFC, 0xC5,
                0xFA, 0x11, 0x44, 0x0F, 0xFC, 0xC5, 0xFA, 0x10, 0x0C, 0x31, 0xC4, 0xE2, 0x69, 0xA9, 0x09, 0xC5,
                0xFA, 0x11, 0x09, 0xC4, 0xC1, 0x7A, 0x10, 0x04, 0x0E, 0xC4, 0xE2, 0x69, 0xA9, 0x04, 0x0F, 0xC5,
                0xFA, 0x11, 0x04, 0x0F, 0xC5, 0xFA, 0x10, 0x4C, 0x31, 0x04, 0xC4, 0xE2, 0x69, 0xA9, 0x49, 0x04,
                0xC5, 0xFA, 0x11, 0x49, 0x04, 0xC4, 0xC1, 0x7A, 0x10, 0x44, 0x0E, 0x04, 0xC4, 0xE2, 0x69, 0xA9,
                0x44, 0x0F, 0x04, 0xC5, 0xFA, 0x11, 0x44, 0x0F, 0x04, 0xC5, 0xFA, 0x10, 0x4C, 0x31, 0x08, 0xC4,
                0xE2, 0x69, 0xA9, 0x49, 0x08, 0xC5, 0xFA, 0x11, 0x49, 0x08, 0xC4, 0xC1, 0x7A, 0x10, 0x44, 0x0E,
                0x08, 0xC4, 0xE2, 0x69, 0xA9, 0x44, 0x0F, 0x08, 0xC5, 0xFA, 0x11, 0x44, 0x0F, 0x08, 0x48, 0x8D,
                0x49, 0x10, 0x49, 0x83, 0xEF, 0x01, 0x0F, 0x85, 0x64, 0xFF, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24,
                0x08, 0x45, 0x3B, 0xC3, 0x73, 0x42, 0x49, 0x8D, 0x0C, 0x99, 0x4D, 0x2B, 0xD1, 0x49, 0x8B, 0xDC,
                0x49, 0x2B, 0xD1, 0x49, 0x2B, 0xD9, 0x41, 0x8B, 0xC3, 0x41, 0x2B, 0xC0, 0x44, 0x8B, 0xC0, 0xC4,
                0xA1, 0x7A, 0x10, 0x04, 0x11, 0xC4, 0xE2, 0x69, 0xA9, 0x01, 0xC5, 0xFA, 0x11, 0x01, 0xC5, 0xFA,
                0x10, 0x0C, 0x0B, 0xC4, 0xE2, 0x69, 0xA9, 0x0C, 0x0A, 0xC5, 0xFA, 0x11, 0x0C, 0x0A, 0x48, 0x8D,
                0x49, 0x04, 0x49, 0x83, 0xE8, 0x01, 0x75, 0xD7, 0x4C, 0x8B, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00,
                0x4D, 0x85, 0xD2, 0x74, 0x0A, 0xC4, 0xC1, 0x6A, 0x58, 0x07, 0xC4, 0xC1, 0x7A, 0x11, 0x07, 0x8B,
                0x94, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x49, 0x83, 0xC7, 0x04, 0x8B, 0x44, 0x24, 0x04, 0x41, 0xFF,
                0xC5, 0x48, 0x8B, 0x5C, 0x24, 0x58, 0x4C, 0x89, 0x7C, 0x24, 0x08, 0x44, 0x3B, 0xEA, 0x0F, 0x82,
                0xAC, 0xFD, 0xFF, 0xFF, 0x44, 0x8B, 0x04, 0x24, 0x48, 0x8B, 0x7C, 0x24, 0x60, 0x4C, 0x8B, 0x4C,
                0x24, 0x68, 0x41, 0xFF, 0xC0, 0x44, 0x89, 0x04, 0x24, 0x44, 0x3B, 0x84, 0x24, 0x90, 0x00, 0x00,
                0x00, 0x0F, 0x82, 0x59, 0xFD, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24, 0x10, 0x4C, 0x8B, 0x74, 0x24,
                0x18, 0x4C, 0x8B, 0x6C, 0x24, 0x20, 0x4C, 0x8B, 0x64, 0x24, 0x28, 0x48, 0x8B, 0x74, 0x24, 0x30,
                0xC5, 0xF8, 0x77, 0x48, 0x83, 0xC4, 0x38, 0x5F, 0x5B, 0xC3
            };

        static byte[] matmul_forward = new byte[] {
                0x48, 0x8B, 0xC4, 0x4C, 0x89, 0x48, 0x20, 0x4C, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x48,
                0x89, 0x48, 0x08, 0x41, 0x55, 0x48, 0x83, 0xEC, 0x40, 0x45, 0x33, 0xED, 0x44, 0x89, 0x2C, 0x24,
                0x44, 0x39, 0x6C, 0x24, 0x70, 0x0F, 0x86, 0xDA, 0x01, 0x00, 0x00, 0x44, 0x8B, 0x54, 0x24, 0x78,
                0x48, 0x89, 0x58, 0xF0, 0x48, 0x89, 0x70, 0xE8, 0x48, 0x89, 0x78, 0xE0, 0x4C, 0x89, 0x60, 0xD8,
                0x44, 0x8B, 0xA4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x4C, 0x89, 0x70, 0xD0, 0x4C, 0x89, 0x78, 0xC8,
                0x41, 0x8B, 0xC5, 0x45, 0x33, 0xF6, 0x41, 0x0F, 0xAF, 0xC2, 0x48, 0x8D, 0x34, 0x82, 0x41, 0x8B,
                0xC5, 0x41, 0x0F, 0xAF, 0xC4, 0x48, 0x8D, 0x3C, 0x81, 0x45, 0x85, 0xE4, 0x0F, 0x84, 0x63, 0x01,
                0x00, 0x00, 0x4C, 0x8B, 0x6C, 0x24, 0x68, 0x4D, 0x8B, 0xFD, 0x4C, 0x2B, 0xFF, 0x0F, 0x1F, 0x00,
                0x4D, 0x85, 0xED, 0x74, 0x08, 0xC4, 0xA1, 0x7A, 0x10, 0x1C, 0x3F, 0xEB, 0x04, 0xC5, 0xE0, 0x57,
                0xDB, 0x41, 0x8B, 0xC6, 0x33, 0xDB, 0x41, 0x0F, 0xAF, 0xC2, 0x4D, 0x8D, 0x0C, 0x80, 0x45, 0x33,
                0xC0, 0x45, 0x85, 0xD2, 0x0F, 0x84, 0x04, 0x01, 0x00, 0x00, 0x41, 0x83, 0xFA, 0x10, 0x72, 0x61,
                0x41, 0x8B, 0xD2, 0x48, 0x8D, 0x46, 0x20, 0x83, 0xE2, 0xF0, 0x49, 0x8B, 0xC9, 0x48, 0x2B, 0xCE,
                0xC5, 0xE8, 0x57, 0xD2, 0xC5, 0xD8, 0x57, 0xE4, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xC5, 0xFC, 0x10, 0x48, 0xE0, 0xC4, 0xE2, 0x75, 0xB8, 0x54, 0x08, 0xE0, 0xC5, 0xFC, 0x10, 0x08,
                0xC4, 0xE2, 0x75, 0xB8, 0x24, 0x08, 0x41, 0x83, 0xC0, 0x10, 0x48, 0x8D, 0x40, 0x40, 0x48, 0x83,
                0xC3, 0x10, 0x44, 0x3B, 0xC2, 0x72, 0xD9, 0xC5, 0xDC, 0x58, 0xC2, 0xC5, 0xFF, 0x7C, 0xC8, 0xC5,
                0xF7, 0x7C, 0xD1, 0xC4, 0xE3, 0x7D, 0x19, 0xD0, 0x01, 0xC5, 0xF8, 0x58, 0xC2, 0xC5, 0xE2, 0x58,
                0xD8, 0x45, 0x3B, 0xC2, 0x0F, 0x83, 0x94, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC2, 0x41, 0x2B, 0xC0,
                0x83, 0xF8, 0x04, 0x72, 0x68, 0x41, 0x8B, 0xC2, 0x48, 0x8D, 0x4B, 0x01, 0x41, 0x2B, 0xC0, 0x48,
                0x8D, 0x0C, 0x8E, 0x83, 0xE8, 0x04, 0x49, 0x8B, 0xD1, 0xC1, 0xE8, 0x02, 0x48, 0x2B, 0xD6, 0xFF,
                0xC0, 0x44, 0x8B, 0xD8, 0x45, 0x8D, 0x04, 0x80, 0x48, 0x8D, 0x1C, 0x83, 0x0F, 0x1F, 0x40, 0x00,
                0xC5, 0xFA, 0x10, 0x41, 0xFC, 0xC4, 0xE2, 0x79, 0xB9, 0x5C, 0x11, 0xFC, 0xC5, 0xFA, 0x10, 0x01,
                0xC4, 0xE2, 0x79, 0xB9, 0x1C, 0x11, 0xC5, 0xFA, 0x10, 0x49, 0x04, 0xC4, 0xE2, 0x71, 0xB9, 0x5C,
                0x11, 0x04, 0xC5, 0xFA, 0x10, 0x41, 0x08, 0xC4, 0xE2, 0x79, 0xB9, 0x5C, 0x11, 0x08, 0x48, 0x8D,
                0x49, 0x10, 0x49, 0x83, 0xEB, 0x01, 0x75, 0xC8, 0x45, 0x3B, 0xC2, 0x73, 0x21, 0x4C, 0x2B, 0xCE,
                0x48, 0x8D, 0x0C, 0x9E, 0x41, 0x8B, 0xD2, 0x41, 0x2B, 0xD0, 0xC5, 0xFA, 0x10, 0x01, 0xC4, 0xC2,
                0x79, 0xB9, 0x1C, 0x09, 0x48, 0x8D, 0x49, 0x04, 0x48, 0x83, 0xEA, 0x01, 0x75, 0xEC, 0x4C, 0x8B,
                0x44, 0x24, 0x60, 0x41, 0xFF, 0xC6, 0xC5, 0xFA, 0x11, 0x1F, 0x48, 0x83, 0xC7, 0x04, 0x45, 0x3B,
                0xF4, 0x0F, 0x82, 0xB9, 0xFE, 0xFF, 0xFF, 0x44, 0x8B, 0x2C, 0x24, 0x48, 0x8B, 0x54, 0x24, 0x58,
                0x48, 0x8B, 0x4C, 0x24, 0x50, 0x41, 0xFF, 0xC5, 0x44, 0x89, 0x2C, 0x24, 0x44, 0x3B, 0x6C, 0x24,
                0x70, 0x0F, 0x82, 0x69, 0xFE, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24, 0x10, 0x4C, 0x8B, 0x74, 0x24,
                0x18, 0x4C, 0x8B, 0x64, 0x24, 0x20, 0x48, 0x8B, 0x7C, 0x24, 0x28, 0x48, 0x8B, 0x74, 0x24, 0x30,
                0x48, 0x8B, 0x5C, 0x24, 0x38, 0xC5, 0xF8, 0x77, 0x48, 0x83, 0xC4, 0x40, 0x41, 0x5D, 0xC3
            };

        public MatMulAVX2()
            : base(matmul_forward, matmul_backward) {
        }
    }
}