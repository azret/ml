namespace nn.CPU {
    using System;
    using System.Runtime.InteropServices;
    using System.Threading.Tasks;

    using static kernel32;

    public class MatMulAVX2 : F.MatMul {
        static byte[] _ASM_BACKWARD_AVX2 = new byte[] {

    0x40, 0x53, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xEC, 0x58, 0x8B, 0x41, 0x40, 0x45, 0x33, 0xC0,
    0x48, 0x8B, 0x59, 0x08, 0x4C, 0x8B, 0x49, 0x10, 0x4C, 0x8B, 0x71, 0x18, 0x48, 0x8B, 0x79, 0x20,
    0x48, 0x8B, 0x71, 0x28, 0x4C, 0x8B, 0x51, 0x38, 0x8B, 0x51, 0x48, 0x44, 0x8B, 0x59, 0x44, 0x48,
    0x89, 0x5C, 0x24, 0x08, 0x4C, 0x89, 0x4C, 0x24, 0x30, 0x4C, 0x89, 0x74, 0x24, 0x28, 0x48, 0x89,
    0x7C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x4C, 0x89, 0x54, 0x24, 0x20, 0x89, 0x84, 0x24,
    0x98, 0x00, 0x00, 0x00, 0x89, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00, 0x44, 0x89, 0x84, 0x24, 0x80,
    0x00, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x84, 0xCB, 0x02, 0x00, 0x00, 0x4C, 0x89, 0x64, 0x24, 0x50,
    0x4C, 0x89, 0x6C, 0x24, 0x48, 0x4C, 0x89, 0x7C, 0x24, 0x40, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
    0x41, 0x8B, 0xC0, 0x45, 0x33, 0xED, 0x41, 0x0F, 0xAF, 0xC3, 0x4D, 0x8D, 0x24, 0x81, 0x4D, 0x8D,
    0x0C, 0x86, 0x85, 0xD2, 0x0F, 0x84, 0x6F, 0x02, 0x00, 0x00, 0x41, 0x8B, 0xC0, 0x4C, 0x89, 0x14,
    0x24, 0x0F, 0xAF, 0xC2, 0x4D, 0x8B, 0xFA, 0x89, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, 0x66, 0x90,
    0x41, 0x03, 0xC5, 0x45, 0x33, 0xC0, 0xC5, 0xFA, 0x10, 0x14, 0x83, 0x41, 0x8B, 0xC5, 0x33, 0xDB,
    0x41, 0x0F, 0xAF, 0xC3, 0xC5, 0xF8, 0x28, 0xDA, 0xC4, 0xE2, 0x7D, 0x18, 0xDA, 0x4C, 0x8D, 0x14,
    0x87, 0x48, 0x8D, 0x14, 0x86, 0x45, 0x85, 0xDB, 0x0F, 0x84, 0xD9, 0x01, 0x00, 0x00, 0x41, 0x83,
    0xFB, 0x08, 0x0F, 0x82, 0x97, 0x00, 0x00, 0x00, 0x41, 0x8D, 0x43, 0xFF, 0x48, 0x63, 0xC8, 0x49,
    0x8D, 0x34, 0x8C, 0x48, 0x8D, 0x04, 0x8A, 0x48, 0x3B, 0xD6, 0x77, 0x09, 0x49, 0x3B, 0xC4, 0x0F,
    0x83, 0x7A, 0x00, 0x00, 0x00, 0x49, 0x8D, 0x3C, 0x89, 0x48, 0x3B, 0xD7, 0x77, 0x05, 0x49, 0x3B,
    0xC1, 0x73, 0x6C, 0x49, 0x8D, 0x0C, 0x8A, 0x48, 0x3B, 0xD1, 0x77, 0x05, 0x49, 0x3B, 0xC2, 0x73,
    0x5E, 0x4C, 0x3B, 0xCE, 0x77, 0x05, 0x49, 0x3B, 0xFC, 0x73, 0x54, 0x4C, 0x3B, 0xC9, 0x77, 0x05,
    0x49, 0x3B, 0xFA, 0x73, 0x4A, 0x41, 0x8B, 0xFB, 0x83, 0xE7, 0xF8, 0x49, 0x8B, 0xF2, 0x4D, 0x8B,
    0xF4, 0x49, 0x2B, 0xF1, 0x4D, 0x2B, 0xF1, 0x48, 0x8B, 0xCA, 0x49, 0x8B, 0xC1, 0x49, 0x2B, 0xC9,
    0xC5, 0xFC, 0x10, 0x08, 0xC4, 0xE2, 0x65, 0xB8, 0x0C, 0x06, 0xC5, 0xFC, 0x11, 0x08, 0xC5, 0xFC,
    0x10, 0x0C, 0x01, 0xC4, 0xC2, 0x65, 0xB8, 0x0C, 0x06, 0x41, 0x83, 0xC0, 0x08, 0x48, 0x83, 0xC3,
    0x08, 0xC5, 0xFC, 0x11, 0x0C, 0x01, 0x48, 0x8D, 0x40, 0x20, 0x44, 0x3B, 0xC7, 0x72, 0xD1, 0x45,
    0x3B, 0xC3, 0x0F, 0x83, 0x2F, 0x01, 0x00, 0x00, 0x41, 0x8B, 0xC3, 0x41, 0x2B, 0xC0, 0x83, 0xF8,
    0x04, 0x0F, 0x82, 0xD9, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC3, 0x48, 0x8D, 0x4B, 0x01, 0x41, 0x2B,
    0xC0, 0x49, 0x8D, 0x0C, 0x89, 0x83, 0xE8, 0x04, 0x48, 0x8B, 0xFA, 0xC1, 0xE8, 0x02, 0x49, 0x8B,
    0xF2, 0x4D, 0x8B, 0xF4, 0x49, 0x2B, 0xF9, 0x49, 0x2B, 0xF1, 0x4D, 0x2B, 0xF1, 0xFF, 0xC0, 0x44,
    0x8B, 0xF8, 0x45, 0x8D, 0x04, 0x80, 0x48, 0x8D, 0x1C, 0x83, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
    0xC5, 0xFA, 0x10, 0x44, 0x31, 0xFC, 0xC4, 0xE2, 0x69, 0xA9, 0x41, 0xFC, 0xC5, 0xFA, 0x11, 0x41,
    0xFC, 0xC4, 0xC1, 0x7A, 0x10, 0x44, 0x0E, 0xFC, 0xC4, 0xE2, 0x69, 0xA9, 0x44, 0x0F, 0xFC, 0xC5,
    0xFA, 0x11, 0x44, 0x0F, 0xFC, 0xC5, 0xFA, 0x10, 0x0C, 0x31, 0xC4, 0xE2, 0x69, 0xA9, 0x09, 0xC5,
    0xFA, 0x11, 0x09, 0xC4, 0xC1, 0x7A, 0x10, 0x04, 0x0E, 0xC4, 0xE2, 0x69, 0xA9, 0x04, 0x0F, 0xC5,
    0xFA, 0x11, 0x04, 0x0F, 0xC5, 0xFA, 0x10, 0x4C, 0x31, 0x04, 0xC4, 0xE2, 0x69, 0xA9, 0x49, 0x04,
    0xC5, 0xFA, 0x11, 0x49, 0x04, 0xC4, 0xC1, 0x7A, 0x10, 0x44, 0x0E, 0x04, 0xC4, 0xE2, 0x69, 0xA9,
    0x44, 0x0F, 0x04, 0xC5, 0xFA, 0x11, 0x44, 0x0F, 0x04, 0xC5, 0xFA, 0x10, 0x4C, 0x31, 0x08, 0xC4,
    0xE2, 0x69, 0xA9, 0x49, 0x08, 0xC5, 0xFA, 0x11, 0x49, 0x08, 0xC4, 0xC1, 0x7A, 0x10, 0x44, 0x0E,
    0x08, 0xC4, 0xE2, 0x69, 0xA9, 0x44, 0x0F, 0x08, 0xC5, 0xFA, 0x11, 0x44, 0x0F, 0x08, 0x48, 0x8D,
    0x49, 0x10, 0x49, 0x83, 0xEF, 0x01, 0x0F, 0x85, 0x64, 0xFF, 0xFF, 0xFF, 0x4C, 0x8B, 0x3C, 0x24,
    0x45, 0x3B, 0xC3, 0x73, 0x42, 0x49, 0x8D, 0x0C, 0x99, 0x4D, 0x2B, 0xD1, 0x49, 0x8B, 0xDC, 0x49,
    0x2B, 0xD1, 0x49, 0x2B, 0xD9, 0x41, 0x8B, 0xC3, 0x41, 0x2B, 0xC0, 0x44, 0x8B, 0xC0, 0xC4, 0xA1,
    0x7A, 0x10, 0x04, 0x11, 0xC4, 0xE2, 0x69, 0xA9, 0x01, 0xC5, 0xFA, 0x11, 0x01, 0xC5, 0xFA, 0x10,
    0x0C, 0x0B, 0xC4, 0xE2, 0x69, 0xA9, 0x0C, 0x0A, 0xC5, 0xFA, 0x11, 0x0C, 0x0A, 0x48, 0x8D, 0x49,
    0x04, 0x49, 0x83, 0xE8, 0x01, 0x75, 0xD7, 0x4C, 0x8B, 0x54, 0x24, 0x20, 0x4D, 0x85, 0xD2, 0x74,
    0x0A, 0xC4, 0xC1, 0x6A, 0x58, 0x07, 0xC4, 0xC1, 0x7A, 0x11, 0x07, 0x8B, 0x94, 0x24, 0x88, 0x00,
    0x00, 0x00, 0x49, 0x83, 0xC7, 0x04, 0x8B, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC5,
    0x48, 0x8B, 0x5C, 0x24, 0x08, 0x48, 0x8B, 0x7C, 0x24, 0x10, 0x48, 0x8B, 0x74, 0x24, 0x18, 0x4C,
    0x89, 0x3C, 0x24, 0x44, 0x3B, 0xEA, 0x0F, 0x82, 0xB4, 0xFD, 0xFF, 0xFF, 0x44, 0x8B, 0x84, 0x24,
    0x80, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x74, 0x24, 0x28, 0x4C, 0x8B, 0x4C, 0x24, 0x30, 0x41, 0xFF,
    0xC0, 0x44, 0x89, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x44, 0x3B, 0x84, 0x24, 0x98, 0x00, 0x00,
    0x00, 0x0F, 0x82, 0x59, 0xFD, 0xFF, 0xFF, 0x4C, 0x8B, 0x7C, 0x24, 0x40, 0x4C, 0x8B, 0x6C, 0x24,
    0x48, 0x4C, 0x8B, 0x64, 0x24, 0x50, 0xC5, 0xF8, 0x77, 0x48, 0x83, 0xC4, 0x58, 0x41, 0x5E, 0x5F,
    0x5E, 0x5B, 0xC3
};

        static byte[] _ASM_FORWARD_AVX2 = new byte[] {

    0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x30, 0x48, 0x8B, 0x01, 0x45, 0x33, 0xF6,
    0x44, 0x8B, 0x41, 0x40, 0x44, 0x8B, 0x79, 0x48, 0x4C, 0x8B, 0x51, 0x10, 0x4C, 0x8B, 0x59, 0x20,
    0x4C, 0x8B, 0x69, 0x30, 0x44, 0x8B, 0x49, 0x44, 0x48, 0x89, 0x44, 0x24, 0x68, 0x41, 0x8B, 0xC7,
    0x41, 0x0F, 0xAF, 0xC0, 0x4C, 0x89, 0x14, 0x24, 0x4C, 0x89, 0x5C, 0x24, 0x08, 0x44, 0x89, 0x44,
    0x24, 0x50, 0x89, 0x44, 0x24, 0x58, 0x85, 0xC0, 0x0F, 0x84, 0xAE, 0x01, 0x00, 0x00, 0x48, 0x89,
    0x5C, 0x24, 0x28, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0x7C, 0x24, 0x18, 0x4C, 0x89, 0x64,
    0x24, 0x10, 0x33, 0xD2, 0x41, 0x8B, 0xC6, 0x41, 0xF7, 0xF7, 0x8B, 0xF2, 0x41, 0x3B, 0xC0, 0x0F,
    0x83, 0x65, 0x01, 0x00, 0x00, 0x41, 0x3B, 0xF7, 0x0F, 0x83, 0x5C, 0x01, 0x00, 0x00, 0x8B, 0xC8,
    0x41, 0x0F, 0xAF, 0xC7, 0x41, 0x0F, 0xAF, 0xC9, 0x44, 0x8B, 0xE0, 0x49, 0x8D, 0x3C, 0x8A, 0x4D,
    0x85, 0xED, 0x74, 0x09, 0xC4, 0xC1, 0x7A, 0x10, 0x5C, 0x95, 0x00, 0xEB, 0x04, 0xC5, 0xE0, 0x57,
    0xDB, 0x8B, 0xC6, 0x45, 0x33, 0xC0, 0x41, 0x0F, 0xAF, 0xC1, 0x33, 0xDB, 0x4D, 0x8D, 0x14, 0x83,
    0x45, 0x85, 0xC9, 0x0F, 0x84, 0x05, 0x01, 0x00, 0x00, 0x41, 0x83, 0xF9, 0x10, 0x72, 0x62, 0x41,
    0x8B, 0xD1, 0x48, 0x8D, 0x47, 0x20, 0x83, 0xE2, 0xF0, 0x49, 0x8B, 0xCA, 0x48, 0x2B, 0xCF, 0xC5,
    0xE8, 0x57, 0xD2, 0xC5, 0xD8, 0x57, 0xE4, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC5, 0xFC, 0x10, 0x48, 0xE0, 0xC4, 0xE2, 0x75, 0xB8, 0x54, 0x08, 0xE0, 0xC5, 0xFC, 0x10, 0x08,
    0xC4, 0xE2, 0x75, 0xB8, 0x24, 0x08, 0x41, 0x83, 0xC0, 0x10, 0x48, 0x8D, 0x40, 0x40, 0x48, 0x83,
    0xC3, 0x10, 0x44, 0x3B, 0xC2, 0x72, 0xD9, 0xC5, 0xDC, 0x58, 0xC2, 0xC5, 0xFF, 0x7C, 0xC8, 0xC5,
    0xF7, 0x7C, 0xD1, 0xC4, 0xE3, 0x7D, 0x19, 0xD0, 0x01, 0xC5, 0xF8, 0x58, 0xC2, 0xC5, 0xE2, 0x58,
    0xD8, 0x45, 0x3B, 0xC1, 0x0F, 0x83, 0x94, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC1, 0x41, 0x2B, 0xC0,
    0x83, 0xF8, 0x04, 0x72, 0x68, 0x41, 0x8B, 0xC1, 0x48, 0x8D, 0x4B, 0x01, 0x41, 0x2B, 0xC0, 0x48,
    0x8D, 0x0C, 0x8F, 0x83, 0xE8, 0x04, 0x49, 0x8B, 0xD2, 0xC1, 0xE8, 0x02, 0x48, 0x2B, 0xD7, 0xFF,
    0xC0, 0x44, 0x8B, 0xD8, 0x45, 0x8D, 0x04, 0x80, 0x48, 0x8D, 0x1C, 0x83, 0x0F, 0x1F, 0x40, 0x00,
    0xC5, 0xFA, 0x10, 0x41, 0xFC, 0xC4, 0xE2, 0x79, 0xB9, 0x5C, 0x11, 0xFC, 0xC5, 0xFA, 0x10, 0x01,
    0xC4, 0xE2, 0x79, 0xB9, 0x1C, 0x11, 0xC5, 0xFA, 0x10, 0x49, 0x04, 0xC4, 0xE2, 0x71, 0xB9, 0x5C,
    0x11, 0x04, 0xC5, 0xFA, 0x10, 0x41, 0x08, 0xC4, 0xE2, 0x79, 0xB9, 0x5C, 0x11, 0x08, 0x48, 0x8D,
    0x49, 0x10, 0x49, 0x83, 0xEB, 0x01, 0x75, 0xC8, 0x45, 0x3B, 0xC1, 0x73, 0x21, 0x4C, 0x2B, 0xD7,
    0x48, 0x8D, 0x0C, 0x9F, 0x41, 0x8B, 0xD1, 0x41, 0x2B, 0xD0, 0xC5, 0xFA, 0x10, 0x01, 0xC4, 0xC2,
    0x79, 0xB9, 0x1C, 0x0A, 0x48, 0x8D, 0x49, 0x04, 0x48, 0x83, 0xEA, 0x01, 0x75, 0xEC, 0x48, 0x8B,
    0x4C, 0x24, 0x68, 0x49, 0x8D, 0x04, 0x34, 0x44, 0x8B, 0x44, 0x24, 0x50, 0x4C, 0x8B, 0x14, 0x24,
    0x4C, 0x8B, 0x5C, 0x24, 0x08, 0xC5, 0xFA, 0x11, 0x1C, 0x81, 0x41, 0xFF, 0xC6, 0x44, 0x3B, 0x74,
    0x24, 0x58, 0x0F, 0x82, 0x7A, 0xFE, 0xFF, 0xFF, 0x4C, 0x8B, 0x64, 0x24, 0x10, 0x48, 0x8B, 0x7C,
    0x24, 0x18, 0x48, 0x8B, 0x74, 0x24, 0x20, 0x48, 0x8B, 0x5C, 0x24, 0x28, 0xC5, 0xF8, 0x77, 0x48,
    0x83, 0xC4, 0x30, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0xC3
};

        static byte[] _ASM_FORWARD_KERNEL_AVX2 = new byte[] {

    0x40, 0x57, 0x44, 0x8B, 0x59, 0x48, 0x8B, 0xC2, 0x48, 0x8B, 0x79, 0x20, 0x33, 0xD2, 0x44, 0x8B,
    0x49, 0x44, 0x4C, 0x8B, 0xD1, 0x41, 0xF7, 0xF3, 0x3B, 0x41, 0x40, 0x0F, 0x83, 0x7B, 0x01, 0x00,
    0x00, 0x41, 0x3B, 0xD3, 0x0F, 0x83, 0x72, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x49, 0x10, 0x44, 0x8B,
    0xC0, 0x48, 0x89, 0x5C, 0x24, 0x10, 0x41, 0x0F, 0xAF, 0xC3, 0x48, 0x89, 0x74, 0x24, 0x18, 0x45,
    0x0F, 0xAF, 0xC1, 0x4C, 0x89, 0x74, 0x24, 0x20, 0x4C, 0x89, 0x7C, 0x24, 0x28, 0x4D, 0x8B, 0x3A,
    0x44, 0x8B, 0xF0, 0x49, 0x8B, 0x42, 0x30, 0x8B, 0xF2, 0x4A, 0x8D, 0x1C, 0x81, 0x48, 0x85, 0xC0,
    0x74, 0x07, 0xC5, 0xFA, 0x10, 0x1C, 0x90, 0xEB, 0x04, 0xC5, 0xE0, 0x57, 0xDB, 0x41, 0x0F, 0xAF,
    0xD1, 0x4C, 0x8D, 0x14, 0x97, 0x33, 0xD2, 0x45, 0x85, 0xC9, 0x0F, 0x84, 0xFE, 0x00, 0x00, 0x00,
    0x41, 0x83, 0xF9, 0x10, 0x72, 0x56, 0x45, 0x8B, 0xC1, 0x48, 0x8D, 0x43, 0x20, 0x41, 0x83, 0xE0,
    0xF0, 0x49, 0x8B, 0xCA, 0x48, 0x2B, 0xCB, 0xC5, 0xE8, 0x57, 0xD2, 0xC5, 0xD8, 0x57, 0xE4, 0x90,
    0xC5, 0xFC, 0x10, 0x48, 0xE0, 0xC4, 0xE2, 0x75, 0xB8, 0x54, 0x08, 0xE0, 0xC5, 0xFC, 0x10, 0x08,
    0xC4, 0xE2, 0x75, 0xB8, 0x24, 0x08, 0x83, 0xC2, 0x10, 0x48, 0x8D, 0x40, 0x40, 0x41, 0x3B, 0xD0,
    0x72, 0xDE, 0xC5, 0xDC, 0x58, 0xC2, 0xC5, 0xFF, 0x7C, 0xC8, 0xC5, 0xF7, 0x7C, 0xD1, 0xC4, 0xE3,
    0x7D, 0x19, 0xD0, 0x01, 0xC5, 0xF8, 0x58, 0xC2, 0xC5, 0xE2, 0x58, 0xD8, 0x41, 0x3B, 0xD1, 0x0F,
    0x83, 0x99, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC1, 0x48, 0x63, 0xFA, 0x2B, 0xC2, 0x83, 0xF8, 0x04,
    0x72, 0x6B, 0x41, 0x8B, 0xC1, 0x48, 0x8D, 0x4B, 0x04, 0x2B, 0xC2, 0x48, 0x8D, 0x0C, 0xB9, 0x83,
    0xE8, 0x04, 0x4D, 0x8B, 0xC2, 0xC1, 0xE8, 0x02, 0x4C, 0x2B, 0xC3, 0xFF, 0xC0, 0x44, 0x8B, 0xD8,
    0x8D, 0x14, 0x82, 0x48, 0x8D, 0x3C, 0x87, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC5, 0xFA, 0x10, 0x41, 0xFC, 0xC4, 0xA2, 0x79, 0xB9, 0x5C, 0x01, 0xFC, 0xC5, 0xFA, 0x10, 0x01,
    0xC4, 0xA2, 0x79, 0xB9, 0x1C, 0x01, 0xC5, 0xFA, 0x10, 0x49, 0x04, 0xC4, 0xA2, 0x71, 0xB9, 0x5C,
    0x01, 0x04, 0xC5, 0xFA, 0x10, 0x41, 0x08, 0xC4, 0xA2, 0x79, 0xB9, 0x5C, 0x01, 0x08, 0x48, 0x8D,
    0x49, 0x10, 0x49, 0x83, 0xEB, 0x01, 0x75, 0xC8, 0x41, 0x3B, 0xD1, 0x73, 0x21, 0x4C, 0x2B, 0xD3,
    0x48, 0x8D, 0x04, 0xBB, 0x44, 0x2B, 0xCA, 0x41, 0x8B, 0xC9, 0xC5, 0xFA, 0x10, 0x00, 0xC4, 0xC2,
    0x79, 0xB9, 0x1C, 0x02, 0x48, 0x8D, 0x40, 0x04, 0x48, 0x83, 0xE9, 0x01, 0x75, 0xEC, 0x48, 0x8B,
    0x5C, 0x24, 0x10, 0x49, 0x8D, 0x04, 0x36, 0x4C, 0x8B, 0x74, 0x24, 0x20, 0x48, 0x8B, 0x74, 0x24,
    0x18, 0xC4, 0xC1, 0x7A, 0x11, 0x1C, 0x87, 0x4C, 0x8B, 0x7C, 0x24, 0x28, 0xC5, 0xF8, 0x77, 0x5F,
    0xC3
};

        static byte[] _ASM_MATMUL_BACKWARD_KERNAL_AVX2_I = new byte[] {

    0x48, 0x89, 0x74, 0x24, 0x20, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x44, 0x8B, 0x71, 0x48, 0x33,
    0xF6, 0x4C, 0x8B, 0x61, 0x08, 0x4C, 0x8B, 0x41, 0x18, 0x4C, 0x8B, 0x69, 0x20, 0x44, 0x8B, 0x51,
    0x44, 0x45, 0x85, 0xF6, 0x0F, 0x84, 0xB6, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5C, 0x24, 0x20, 0x41,
    0x8B, 0xC2, 0x4C, 0x89, 0x7C, 0x24, 0x30, 0x45, 0x8B, 0xFE, 0x0F, 0xAF, 0xC2, 0x44, 0x0F, 0xAF,
    0xFA, 0x48, 0x89, 0x7C, 0x24, 0x28, 0x49, 0x8D, 0x1C, 0x80, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
    0x8B, 0xC6, 0x45, 0x33, 0xC9, 0x41, 0x0F, 0xAF, 0xC2, 0x4C, 0x8D, 0x04, 0x85, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x8D, 0x04, 0x37, 0x4D, 0x03, 0xC5, 0xC4, 0xC1, 0x7A, 0x10, 0x14, 0x84, 0xC5, 0xF8,
    0x28, 0xDA, 0xC4, 0xE2, 0x7D, 0x18, 0xDA, 0x45, 0x85, 0xD2, 0x0F, 0x84, 0x46, 0x01, 0x00, 0x00,
    0x41, 0x83, 0xFA, 0x20, 0x0F, 0x82, 0x80, 0x00, 0x00, 0x00, 0x41, 0x8D, 0x42, 0xFF, 0x48, 0x8D,
    0x14, 0x83, 0x49, 0x8D, 0x04, 0x80, 0x48, 0x3B, 0xD8, 0x77, 0x05, 0x49, 0x3B, 0xD0, 0x73, 0x6A,
    0x41, 0x8B, 0xD2, 0x83, 0xE2, 0xE0, 0x41, 0xBB, 0x10, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x40, 0x00,
    0xC4, 0xA1, 0x7C, 0x10, 0x0C, 0x8B, 0xC4, 0x82, 0x65, 0xB8, 0x0C, 0x88, 0xC4, 0xA1, 0x7C, 0x11,
    0x0C, 0x8B, 0x41, 0x8D, 0x43, 0xF8, 0x41, 0x83, 0xC1, 0x20, 0xC5, 0xFC, 0x10, 0x0C, 0x83, 0xC4,
    0xC2, 0x65, 0xB8, 0x0C, 0x80, 0xC5, 0xFC, 0x11, 0x0C, 0x83, 0x41, 0x8B, 0xC3, 0xC5, 0xFC, 0x10,
    0x0C, 0x83, 0xC4, 0xC2, 0x65, 0xB8, 0x0C, 0x80, 0xC5, 0xFC, 0x11, 0x0C, 0x83, 0x41, 0x8D, 0x43,
    0x08, 0x41, 0x83, 0xC3, 0x20, 0xC5, 0xFC, 0x10, 0x0C, 0x83, 0xC4, 0xC2, 0x65, 0xB8, 0x0C, 0x80,
    0xC5, 0xFC, 0x11, 0x0C, 0x83, 0x44, 0x3B, 0xCA, 0x72, 0xA6, 0x45, 0x3B, 0xCA, 0x0F, 0x83, 0xB3,
    0x00, 0x00, 0x00, 0x41, 0x8B, 0xC2, 0x41, 0x8B, 0xF9, 0x41, 0x2B, 0xC1, 0x83, 0xF8, 0x04, 0x72,
    0x7F, 0x41, 0x8B, 0xC2, 0x48, 0x8D, 0x4B, 0x04, 0x41, 0x2B, 0xC1, 0x4A, 0x8D, 0x0C, 0x89, 0x83,
    0xE8, 0x04, 0x49, 0x8B, 0xD0, 0xC1, 0xE8, 0x02, 0x48, 0x2B, 0xD3, 0xFF, 0xC0, 0x44, 0x8B, 0xD8,
    0x45, 0x8D, 0x0C, 0x81, 0x48, 0x8D, 0x3C, 0x87, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC5, 0xFA, 0x10, 0x44, 0x11, 0xFC, 0xC4, 0xE2, 0x69, 0xA9, 0x41, 0xFC, 0xC5, 0xFA, 0x11, 0x41,
    0xFC, 0xC5, 0xFA, 0x10, 0x0C, 0x11, 0xC4, 0xE2, 0x69, 0xA9, 0x09, 0xC5, 0xFA, 0x11, 0x09, 0xC5,
    0xFA, 0x10, 0x44, 0x11, 0x04, 0xC4, 0xE2, 0x69, 0xA9, 0x41, 0x04, 0xC5, 0xFA, 0x11, 0x41, 0x04,
    0xC5, 0xFA, 0x10, 0x4C, 0x11, 0x08, 0xC4, 0xE2, 0x69, 0xA9, 0x49, 0x08, 0xC5, 0xFA, 0x11, 0x49,
    0x08, 0x48, 0x8D, 0x49, 0x10, 0x49, 0x83, 0xEB, 0x01, 0x75, 0xB5, 0x45, 0x3B, 0xCA, 0x73, 0x26,
    0x4C, 0x2B, 0xC3, 0x48, 0x8D, 0x0C, 0xBB, 0x41, 0x8B, 0xD2, 0x41, 0x2B, 0xD1, 0xC4, 0xC1, 0x7A,
    0x10, 0x04, 0x08, 0xC4, 0xE2, 0x69, 0xA9, 0x01, 0xC5, 0xFA, 0x11, 0x01, 0x48, 0x8D, 0x49, 0x04,
    0x48, 0x83, 0xEA, 0x01, 0x75, 0xE7, 0xFF, 0xC6, 0x41, 0x3B, 0xF6, 0x0F, 0x82, 0x7F, 0xFE, 0xFF,
    0xFF, 0x4C, 0x8B, 0x7C, 0x24, 0x30, 0x48, 0x8B, 0x7C, 0x24, 0x28, 0x48, 0x8B, 0x5C, 0x24, 0x20,
    0xC5, 0xF8, 0x77, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0xC3
};

        static byte[] _ASM_MATMUL_BACKWARD_KERNAL_AVX2_II = new byte[] {

    0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x7C, 0x24, 0x20, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56,
    0x41, 0x57, 0x44, 0x8B, 0x79, 0x40, 0x33, 0xFF, 0x4C, 0x8B, 0x61, 0x08, 0x4C, 0x8B, 0x69, 0x10,
    0x4C, 0x8B, 0x41, 0x28, 0x48, 0x8B, 0x71, 0x38, 0x44, 0x8B, 0x49, 0x44, 0x8B, 0x49, 0x48, 0x44,
    0x8B, 0xF2, 0x89, 0x4C, 0x24, 0x28, 0x45, 0x85, 0xFF, 0x0F, 0x84, 0xAB, 0x01, 0x00, 0x00, 0x41,
    0x8B, 0xC1, 0x48, 0x89, 0x5C, 0x24, 0x30, 0x41, 0x0F, 0xAF, 0xC6, 0x4D, 0x8D, 0x1C, 0x80, 0x90,
    0x8B, 0xC7, 0x45, 0x33, 0xC0, 0x41, 0x0F, 0xAF, 0xC1, 0x48, 0x8D, 0x14, 0x85, 0x00, 0x00, 0x00,
    0x00, 0x8B, 0xC7, 0x0F, 0xAF, 0xC1, 0x49, 0x03, 0xD5, 0x41, 0x03, 0xC6, 0xC4, 0xC1, 0x7A, 0x10,
    0x14, 0x84, 0xC5, 0xF8, 0x28, 0xDA, 0xC4, 0xE2, 0x7D, 0x18, 0xDA, 0x45, 0x85, 0xC9, 0x0F, 0x84,
    0x41, 0x01, 0x00, 0x00, 0x41, 0x83, 0xF9, 0x20, 0x0F, 0x82, 0x7E, 0x00, 0x00, 0x00, 0x41, 0x8D,
    0x41, 0xFF, 0x4D, 0x8D, 0x14, 0x83, 0x48, 0x8D, 0x04, 0x82, 0x4C, 0x3B, 0xD8, 0x77, 0x05, 0x4C,
    0x3B, 0xD2, 0x73, 0x68, 0x45, 0x8B, 0xD1, 0x41, 0x83, 0xE2, 0xE0, 0xBB, 0x10, 0x00, 0x00, 0x00,
    0xC4, 0x81, 0x7C, 0x10, 0x0C, 0x83, 0xC4, 0xA2, 0x65, 0xB8, 0x0C, 0x82, 0xC4, 0x81, 0x7C, 0x11,
    0x0C, 0x83, 0x8D, 0x43, 0xF8, 0x41, 0x83, 0xC0, 0x20, 0xC4, 0xC1, 0x7C, 0x10, 0x0C, 0x83, 0xC4,
    0xE2, 0x65, 0xB8, 0x0C, 0x82, 0xC4, 0xC1, 0x7C, 0x11, 0x0C, 0x83, 0x8B, 0xC3, 0xC4, 0xC1, 0x7C,
    0x10, 0x0C, 0x83, 0xC4, 0xE2, 0x65, 0xB8, 0x0C, 0x82, 0xC4, 0xC1, 0x7C, 0x11, 0x0C, 0x83, 0x8D,
    0x43, 0x08, 0x83, 0xC3, 0x20, 0xC4, 0xC1, 0x7C, 0x10, 0x0C, 0x83, 0xC4, 0xE2, 0x65, 0xB8, 0x0C,
    0x82, 0xC4, 0xC1, 0x7C, 0x11, 0x0C, 0x83, 0x45, 0x3B, 0xC2, 0x72, 0xA4, 0x45, 0x3B, 0xC1, 0x0F,
    0x83, 0xB0, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xC1, 0x41, 0x8B, 0xD8, 0x41, 0x2B, 0xC0, 0x49, 0x2B,
    0xD3, 0x83, 0xF8, 0x04, 0x72, 0x7A, 0x41, 0x8B, 0xC1, 0x49, 0x8D, 0x4B, 0x04, 0x41, 0x2B, 0xC0,
    0x4A, 0x8D, 0x0C, 0x81, 0x83, 0xE8, 0x04, 0xC1, 0xE8, 0x02, 0xFF, 0xC0, 0x44, 0x8B, 0xD0, 0x45,
    0x8D, 0x04, 0x80, 0x48, 0x8D, 0x1C, 0x83, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC5, 0xFA, 0x10, 0x44, 0x11, 0xFC, 0xC4, 0xE2, 0x69, 0xA9, 0x41, 0xFC, 0xC5, 0xFA, 0x11, 0x41,
    0xFC, 0xC5, 0xFA, 0x10, 0x0C, 0x11, 0xC4, 0xE2, 0x69, 0xA9, 0x09, 0xC5, 0xFA, 0x11, 0x09, 0xC5,
    0xFA, 0x10, 0x44, 0x11, 0x04, 0xC4, 0xE2, 0x69, 0xA9, 0x41, 0x04, 0xC5, 0xFA, 0x11, 0x41, 0x04,
    0xC5, 0xFA, 0x10, 0x4C, 0x11, 0x08, 0xC4, 0xE2, 0x69, 0xA9, 0x49, 0x08, 0xC5, 0xFA, 0x11, 0x49,
    0x08, 0x48, 0x8D, 0x49, 0x10, 0x49, 0x83, 0xEA, 0x01, 0x75, 0xB5, 0x45, 0x3B, 0xC1, 0x73, 0x25,
    0x41, 0x8B, 0xC1, 0x49, 0x8D, 0x0C, 0x9B, 0x41, 0x2B, 0xC0, 0x44, 0x8B, 0xC0, 0xC5, 0xFA, 0x10,
    0x04, 0x0A, 0xC4, 0xE2, 0x69, 0xA9, 0x01, 0xC5, 0xFA, 0x11, 0x01, 0x48, 0x8D, 0x49, 0x04, 0x49,
    0x83, 0xE8, 0x01, 0x75, 0xE8, 0x48, 0x85, 0xF6, 0x74, 0x0C, 0xC4, 0xA1, 0x6A, 0x58, 0x04, 0xB6,
    0xC4, 0xA1, 0x7A, 0x11, 0x04, 0xB6, 0x8B, 0x4C, 0x24, 0x28, 0xFF, 0xC7, 0x41, 0x3B, 0xFF, 0x0F,
    0x82, 0x6B, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0xC5, 0xF8, 0x77, 0x48, 0x8B, 0x74,
    0x24, 0x38, 0x48, 0x8B, 0x7C, 0x24, 0x40, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0xC3

};

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        unsafe delegate void _T_FORWARD_AVX2(_MatMul* args);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        public unsafe delegate void _T_FORWARD_KERNEL_AVX2(_MatMul* args, uint bo);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        unsafe delegate void _T_BACKWARD_AVX2(_MatMul* args);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        public unsafe delegate void _T_BACKWARD_KERNEL_AVX2_I(_MatMul* args, uint b);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        public unsafe delegate void _T_BACKWARD_KERNEL_AVX2_II(_MatMul* args, uint o);

        IntPtr _forward_kernel_ptr;
        _T_FORWARD_KERNEL_AVX2 _matmul_forward_kernel_avx2;

        IntPtr _backward_ptr;
        _T_BACKWARD_AVX2 _matmul_backward_avx2;

        IntPtr _forward_ptr;
        _T_FORWARD_AVX2 _matmul_forward_avx2;

        IntPtr _T_BACKWARD_KERNEL_I_AVX2_PTR;
        _T_BACKWARD_KERNEL_AVX2_I __T_BACKWARD_KERNEL_I_AVX2;

        IntPtr _T_BACKWARD_KERNEL_II_AVX2_PTR;
        _T_BACKWARD_KERNEL_AVX2_II __T_BACKWARD_KERNEL_II_AVX2;

        public MatMulAVX2(int maxDegreeOfParallelism) : base(maxDegreeOfParallelism) {
            _forward_kernel_ptr = VirtualAllocExecuteReadWrite(_ASM_FORWARD_KERNEL_AVX2);
            _forward_ptr = VirtualAllocExecuteReadWrite(_ASM_FORWARD_AVX2);
            _backward_ptr = VirtualAllocExecuteReadWrite(_ASM_BACKWARD_AVX2);
            _T_BACKWARD_KERNEL_I_AVX2_PTR = VirtualAllocExecuteReadWrite(_ASM_MATMUL_BACKWARD_KERNAL_AVX2_I);
            _T_BACKWARD_KERNEL_II_AVX2_PTR = VirtualAllocExecuteReadWrite(_ASM_MATMUL_BACKWARD_KERNAL_AVX2_II);
            _matmul_forward_kernel_avx2 = Marshal.GetDelegateForFunctionPointer<_T_FORWARD_KERNEL_AVX2>(_forward_kernel_ptr);
            _matmul_forward_avx2 = Marshal.GetDelegateForFunctionPointer<_T_FORWARD_AVX2>(_forward_ptr);
            _matmul_backward_avx2 = Marshal.GetDelegateForFunctionPointer<_T_BACKWARD_AVX2>(_backward_ptr);
            __T_BACKWARD_KERNEL_I_AVX2 = Marshal.GetDelegateForFunctionPointer<_T_BACKWARD_KERNEL_AVX2_I>(_T_BACKWARD_KERNEL_I_AVX2_PTR);
            __T_BACKWARD_KERNEL_II_AVX2 = Marshal.GetDelegateForFunctionPointer<_T_BACKWARD_KERNEL_AVX2_II>(_T_BACKWARD_KERNEL_II_AVX2_PTR);
        }

        protected override void Dispose(bool disposing) {
            _matmul_forward_kernel_avx2 = null;
            _matmul_backward_avx2 = null;
            _matmul_forward_avx2 = null;
            __T_BACKWARD_KERNEL_II_AVX2 = null;
            __T_BACKWARD_KERNEL_I_AVX2 = null;
            VirtualFree(_forward_ptr, IntPtr.Zero, FreeTypes.Release);
            VirtualFree(_backward_ptr, IntPtr.Zero, FreeTypes.Release);
            VirtualFree(_forward_kernel_ptr, IntPtr.Zero, FreeTypes.Release);
            VirtualFree(_T_BACKWARD_KERNEL_I_AVX2_PTR, IntPtr.Zero, FreeTypes.Release);
            VirtualFree(_T_BACKWARD_KERNEL_II_AVX2_PTR, IntPtr.Zero, FreeTypes.Release);
            base.Dispose(disposing);
        }

        public override unsafe void forward(
            float* _Out,
            float* _In,
            float* _Weight,
            float* _Bias,
            uint B,
            uint I,
            uint O) {

            _MatMul _MatMul;
            _MatMul._Out = _Out;
            _MatMul._In = _In;
            _MatMul._Weight = _Weight;
            _MatMul._Bias = _Bias;
            _MatMul.B = B;
            _MatMul.I = I;
            _MatMul.O = O;

            _MatMul* args = &_MatMul;

            if (_maxDegreeOfParallelism == -1 || _maxDegreeOfParallelism > 0) {
                Parallel.For(0, B * O, (bo) => {
                    _matmul_forward_kernel_avx2(args, (uint)bo);
                });
            } else {
                _matmul_forward_avx2(args);
            }
        }

        public override unsafe void backward(
            float* _Out,
            float* d_Out,
            float* _In,
            float* d_In,
            float* _Weight,
            float* d_Weight,
            float* _Bias,
            float* d_Bias,
            uint B,
            uint I,
            uint O) {

            _MatMul _MatMul;
            _MatMul._Out = _Out;
            _MatMul.d_Out = d_Out;
            _MatMul._In = _In;
            _MatMul.d_In = d_In;
            _MatMul._Weight = _Weight;
            _MatMul.d_Weight = d_Weight;
            _MatMul._Bias = _Bias;
            _MatMul.d_Bias = d_Bias;
            _MatMul.B = B;
            _MatMul.I = I;
            _MatMul.O = O;

            _MatMul* args = &_MatMul;

            if (_maxDegreeOfParallelism == -1 || _maxDegreeOfParallelism > 0) {
                Parallel.For(0, B, (b) => {
                    __T_BACKWARD_KERNEL_I_AVX2(args, (uint)b);
                });
                Parallel.For(0, O, (o) => {
                    __T_BACKWARD_KERNEL_II_AVX2(args, (uint)o);
                });
            } else {
                _matmul_backward_avx2(&_MatMul);
            }
        }
    }
}